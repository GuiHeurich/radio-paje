name: Build and Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Elixir Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir and Erlang
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18.4'
          otp-version: '27.3'

      - name: Cache Elixir dependencies
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: assets/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/assets/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install all dependencies
        run: |
          mix deps.get --only prod
          npm install --prefix ./assets

      - name: Compile assets and build release
        env:
          MIX_ENV: prod
        run: |
          mix esbuild.install --if-missing
          mix assets.deploy
          mix release

      # --- THIS IS THE CORRECTED STEP ---
      - name: Create release tarball
        run: |
          # Navigate into the releases directory where the versioned folder is
          cd _build/prod/rel/radio_backend/releases
          
          # Find the version number (e.g., "0.1.0")
          RELEASE_VERSION=$(ls | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "Found release version: ${RELEASE_VERSION}"

          # Create the tarball, archiving only the versioned directory.
          # The output file is placed one level up.
          tar -czf "../radio_backend-${RELEASE_VERSION}.tar.gz" "${RELEASE_VERSION}"

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-backend-release
          path: _build/prod/rel/radio_backend/*.tar.gz

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: Production

    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: radio-backend-release

      - name: Copy release to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*.tar.gz"
          target: "/tmp"

      # --- THIS IS THE NEW DIAGNOSTIC STEP ---
      - name: Unpack and Verify on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Setup the directory
            sudo mkdir -p /var/www/radio_backend
            sudo chown ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} /var/www/radio_backend

            # Unpack the release
            sudo tar -xzf /tmp/*.tar.gz -C /var/www/radio_backend/

            # --- THIS IS THE MOST IMPORTANT PART ---
            # Let's see what is actually inside the directory after unpacking
            echo "--- Verifying unpacked contents of /var/www/radio_backend/ ---"
            ls -lA /var/www/radio_backend/
            
            # If there's a subdirectory, let's see inside it too
            # This command will list the first subdirectory it finds, if any
            SUBDIR=$(ls /var/www/radio_backend/ | head -n 1)
            if [ -n "$SUBDIR" ]; then
              echo "--- Verifying contents of subdirectory: $SUBDIR ---"
              ls -lA /var/www/radio_backend/"$SUBDIR"
            fi
            # ----------------------------------------

            # The rest of the script is disabled for this test.
            echo "--- Debugging complete. Please post the output of the 'ls' commands. ---"
