name: Build and Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Elixir Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir and Erlang
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18.4'
          otp-version: '27.3'

      # Cache dependencies to speed up future builds
      - name: Cache Elixir dependencies
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: assets/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/assets/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install all dependencies
        run: |
          mix deps.get --only prod
          npm install --prefix ./assets

      - name: Compile assets and build release
        env:
          MIX_ENV: prod
        run: |
          mix esbuild.install --if-missing
          mix assets.deploy
          mix release
      - name: Create release tarball
        run: |
          # Navigate into the main release directory
          cd _build/prod/rel/radio_backend

          # Find the version number by looking at the directory name inside releases/
          # This is more robust than parsing a file.
          RELEASE_VERSION=$(ls releases | head -n 1)
          echo "Found release version: ${RELEASE_VERSION}"

          # Create the tarball, named with the version
          tar -czf "radio_backend-${RELEASE_VERSION}.tar.gz" -C releases/ .
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-backend-release
          # The path to the generated .tar.gz file
          path: _build/prod/rel/radio_backend/*.tar.gz

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: Production # Use secrets from the "Production" environment

    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: radio-backend-release

      - name: Copy release to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*.tar.gz" # The file we downloaded in the previous step
          target: "/tmp"    # A temporary directory on the EC2 instance

      - name: Unpack and restart on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Ensure the target directory exists and has correct permissions
            sudo mkdir -p /var/www/radio_backend
            sudo chown ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} /var/www/radio_backend

            # Unpack the release from /tmp into the final destination
            # The --strip-components=1 removes the top-level version directory
            sudo tar -xzf /tmp/*.tar.gz -C /var/www/radio_backend/ --strip-components=1

            # Clean up the temporary archive file
            rm /tmp/*.tar.gz

            # Run database migrations
            # The release needs the DB URL to boot, even for migrations.
            # We will pass it via an environment file for better security.
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > /tmp/prod.env
            echo "SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}" >> /tmp/prod.env
            echo "PHX_HOST=${{ secrets.PHX_HOST }}" >> /tmp/prod.env
            
            # Source the env file to run the command
            set -a; source /tmp/prod.env; set +a
            /var/www/radio_backend/bin/radio_backend eval "RadioBackend.Release.migrate"
            rm /tmp/prod.env

            # Restart the application service, which will use the systemd env file
            sudo systemctl restart radio_backend
